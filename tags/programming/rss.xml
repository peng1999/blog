<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>pg999w&#x27;s blog - programming</title>
      <link>https://blog.pg999w.top/</link>
      <description>My life, experience and knowledge</description>
      <generator>Zola</generator>
      <language>en</language>
      <atom:link href="https://blog.pg999w.top/tags/programming/rss.xml" rel="self" type="application/rss+xml"/>
      <lastBuildDate>Mon, 16 Sep 2024 00:00:00 +0000</lastBuildDate>
      <!-- for follow.is verification -->
      <follow_challenge>
        <feedId>74749384348414976</feedId>
        <userId>74745960279982080</userId>
      </follow_challenge>
      <item>
          <title>可执行文件与动态库共享全局变量</title>
          <pubDate>Mon, 16 Sep 2024 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://blog.pg999w.top/rust-dylib-export/</link>
          <guid>https://blog.pg999w.top/rust-dylib-export/</guid>
          <description xml:base="https://blog.pg999w.top/rust-dylib-export/">&lt;p&gt;有时候我们会希望通过 dlopen 来加载一个动态链接库，并且在主程序中和库中访问同一个全局变量。下面用 Rust 来实现一个 &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Minimal_reproducible_example&quot;&gt;MWE&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Rust 和 C++ 的对象生命管理</title>
          <pubDate>Tue, 14 Nov 2023 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://blog.pg999w.top/rust-cpp-object-management/</link>
          <guid>https://blog.pg999w.top/rust-cpp-object-management/</guid>
          <description xml:base="https://blog.pg999w.top/rust-cpp-object-management/">&lt;p&gt;Rust 和 C++ 的对象都是值语义，都采用了 RAII 惯用法。所以他们需要处理类似的对象生命周期问题：需要专门的代码来处理对象的初始化，复制和析构。下面进行一个比较，我们能够看到两种语言之间内在的对称性。&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>为 Typst 添加中文排版支持</title>
          <pubDate>Sat, 22 Jul 2023 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://blog.pg999w.top/typst-clreq/</link>
          <guid>https://blog.pg999w.top/typst-clreq/</guid>
          <description xml:base="https://blog.pg999w.top/typst-clreq/">&lt;p&gt;Typst 是一个 2023 年初开源的一个排版软件。类似于 LaTeX，它通过纯文本编写源代码，然后通过编译器将源代码转换为排版好的 PDF 文件。虽然目前 Typst 的生态还不如 LaTeX，但是比起 LaTeX，它有一些明显的优势：&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Too many channels in Rust but only one in Go</title>
          <pubDate>Thu, 24 Mar 2022 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://blog.pg999w.top/too-many-channels/</link>
          <guid>https://blog.pg999w.top/too-many-channels/</guid>
          <description xml:base="https://blog.pg999w.top/too-many-channels/">&lt;p&gt;Channel 是异步编程 CSP 模型和 Actor 模型的重要组成部分，是一种用于消息同步的数据结构。Go 语言中的 &lt;code&gt;chan&lt;&#x2F;code&gt; 类型即是一种 channel 的实现。在使用 Rust 进行异步编程的时候也需要使用 channel。然而 Rust 中的 channel 似乎太多了。&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>用 Julia 编写 CUDA 程序</title>
          <pubDate>Sat, 22 Jan 2022 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://blog.pg999w.top/julia-cuda/</link>
          <guid>https://blog.pg999w.top/julia-cuda/</guid>
          <description xml:base="https://blog.pg999w.top/julia-cuda/">&lt;p&gt;CUDA 本身是一个 C 库，而 CUDA kernel 则需要使用扩展的 C&#x2F;C++ 语法。但 &lt;a href=&quot;https:&#x2F;&#x2F;cuda.juliagpu.org&#x2F;stable&#x2F;&quot;&gt;CUDA.jl&lt;&#x2F;a&gt; 让 Julia CUDA 编程成为可能。然而虽然 CUDA.jl 实现了绝大多数 CUDA 的功能，但其文档仍很不完善。本文补充了一些常见 CUDA 功能在 Julia 中的写法。本文假设读者预先具有 Julia，CUDA，以及 CUDA.jl 的基本知识。&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>用 Perl 做查找替换</title>
          <pubDate>Sat, 01 Jan 2022 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://blog.pg999w.top/perl-replace/</link>
          <guid>https://blog.pg999w.top/perl-replace/</guid>
          <description xml:base="https://blog.pg999w.top/perl-replace/">&lt;p&gt;现在需要把一篇文章中两个中文字符中的回车给删掉。这时候需要用到支持 Unicode 的正则表达式。这时候我们还是用最强大的字符处理语言 Perl 来搞。命令如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#eff1f5;color:#4f5b66;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;perl -CSAD -0p -i&lt;&#x2F;span&gt;&lt;span&gt;.bak&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -e &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;s&#x2F;(\p{category=Po}|\p{sc=Han})\n *(\p{sc=Han})&#x2F;$1$2&#x2F;gms&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; file.md
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果不涉及 Unicode 处理，可以不用加 &lt;code&gt;-CSAD&lt;&#x2F;code&gt;，如果处理不跨行，可以不用 &lt;code&gt;-0&lt;&#x2F;code&gt;，如果不需要备份文件，可以删去 &lt;code&gt;.bak&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Rust 编译到 musl target 的踩坑记录</title>
          <pubDate>Sun, 30 May 2021 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://blog.pg999w.top/rust-musl-target/</link>
          <guid>https://blog.pg999w.top/rust-musl-target/</guid>
          <description xml:base="https://blog.pg999w.top/rust-musl-target/">&lt;p&gt;Rust 在 x86_64-unknown-linux-gnu 目标下默认会动态链接到系统 C 运行时，而不同发行版之间的 libc 可能会有兼容性问题。如果想要把一次编译好的可执行文件放到不同的 Linux 发行版上面去跑，最好采用 x86_64-unknown-linux-musl 目标进行静态编译。&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>C++ 每三年才解决一点点问题</title>
          <pubDate>Mon, 30 Nov 2020 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://blog.pg999w.top/c-template-constraint/</link>
          <guid>https://blog.pg999w.top/c-template-constraint/</guid>
          <description xml:base="https://blog.pg999w.top/c-template-constraint/">&lt;p&gt;或：怎样优雅地给 C++ 模板添加约束？&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Docker 搭建 RoboMaster RoboRTS 框架构建环境</title>
          <pubDate>Sun, 02 Aug 2020 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://blog.pg999w.top/ros-docker/</link>
          <guid>https://blog.pg999w.top/ros-docker/</guid>
          <description xml:base="https://blog.pg999w.top/ros-docker/">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;RoboMaster&#x2F;RoboRTS&quot;&gt;RoboRTS&lt;&#x2F;a&gt; 框架用于大疆的 RoboMaster ICRA 人工智能挑战赛。其构建环境基于 &lt;a href=&quot;https:&#x2F;&#x2F;www.ros.org&#x2F;&quot;&gt;ROS&lt;&#x2F;a&gt;，在非 Ubuntu&#x2F;CentOS 的 Linux 机器上面安装较为困难。于是我们采用基于 docker 的构建方案。&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>用 Perl 进制转换</title>
          <pubDate>Mon, 22 Jun 2020 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://blog.pg999w.top/perl-hex/</link>
          <guid>https://blog.pg999w.top/perl-hex/</guid>
          <description xml:base="https://blog.pg999w.top/perl-hex/">&lt;p&gt;现在需要把一堆十进制数转换为二进制数，在 Vim 里可以用 &lt;code&gt;:&#x27;&amp;lt;,&#x27;&amp;gt;!command&lt;&#x2F;code&gt; 来做转换。但是我发现常见的行处理程序 &lt;code&gt;awk&lt;&#x2F;code&gt; 根本搞不定进制转换，所以还是用最强大的字符处理语言 Perl 来搞。命令如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#eff1f5;color:#4f5b66;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;perl -ne &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;printf(&amp;quot;%032b\n&amp;quot;, $_)&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果输入是十六进制呢？加个 &lt;code&gt;hex&lt;&#x2F;code&gt; 函数就行：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#eff1f5;color:#4f5b66;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;perl -ne &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;printf(&amp;quot;%032b\n&amp;quot;, hex($_))&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果一行有多个字段，只想转换第二个呢？这就要用到 &lt;code&gt;-a&lt;&#x2F;code&gt; 参数，此时 &lt;code&gt;$_&lt;&#x2F;code&gt; 变为数组 &lt;code&gt;@F&lt;&#x2F;code&gt;：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#eff1f5;color:#4f5b66;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;perl -ane &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;printf(&amp;quot;%s\t%032b\n&amp;quot;, @F[0], hex(@F[1]))&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;最后注意在 Vim 中 &lt;code&gt;%&lt;&#x2F;code&gt; 符号需要转义。&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>从 C++ 的错误处理说起</title>
          <pubDate>Thu, 16 Apr 2020 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://blog.pg999w.top/c-p0709/</link>
          <guid>https://blog.pg999w.top/c-p0709/</guid>
          <description xml:base="https://blog.pg999w.top/c-p0709/">&lt;p&gt;&lt;strong&gt;错误处理&lt;&#x2F;strong&gt;是一个非常重要的软件工程问题。对软件中出现的非致命错误的不当处理，是几乎所有的灾难性系统故障的诱因。 编程语言往往需要提供一些用于错误处理的语言设施，这些设施反过来会影响项目中错误处理的方式。不同的语言错误处理方式不同。例如 Java 采用基于 try-throw-catch 语法的异常机制，而 Go 语言则选择手动检测函数返回的 &lt;code&gt;error&lt;&#x2F;code&gt; 对象。一个令人惊讶的事实是，C++ 到现在还没有一个被广泛接受的错误处理方式。&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>constexpr string</title>
          <pubDate>Thu, 19 Dec 2019 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://blog.pg999w.top/constexpr-string/</link>
          <guid>https://blog.pg999w.top/constexpr-string/</guid>
          <description xml:base="https://blog.pg999w.top/constexpr-string/">&lt;p&gt;按照 &lt;a href=&quot;https:&#x2F;&#x2F;akrzemi1.wordpress.com&#x2F;2017&#x2F;06&#x2F;28&#x2F;compile-time-string-concatenation&#x2F;&quot;&gt;Andrzej&#x27;s C++ blog&lt;&#x2F;a&gt; 里这篇文章的思路，我实现了一个编译期的字符串拼接：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#eff1f5;color:#4f5b66;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;sstring &lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt; inner[N];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;constexpr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sstring&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;constexpr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sstring&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;s)[N]) : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inner&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;{} {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;; i &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt; N; &lt;&#x2F;span&gt;&lt;span&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;i) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;            inner[i] &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt; s[i];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt; M&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;constexpr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sstring&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt; sstring&amp;lt;M&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lhs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt; sstring&amp;lt;N &lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt; M&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rhs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;) : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inner&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;{} {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;; i &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt; M; &lt;&#x2F;span&gt;&lt;span&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;i) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;            inner[i] &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt; lhs[i];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;; i &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt; N &lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt; M; &lt;&#x2F;span&gt;&lt;span&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;i) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;            inner[i &lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt; N] &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt; rhs[i];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;constexpr char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;operator[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt; inner[i];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#343d46;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sstring&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;s)[N]) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sstring&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;N&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; M, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sstring&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; sstring&amp;lt;M&amp;gt; &amp;amp;lhs, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; sstring&amp;lt;N&amp;gt; &amp;amp;rhs) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sstring&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;N + M&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; M, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;constexpr auto &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;operator+&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; sstring&amp;lt;M&amp;gt; &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lhs&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; sstring&amp;lt;N&amp;gt; &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rhs&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sstring&lt;&#x2F;span&gt;&lt;span&gt;(lhs, rhs);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;constexpr&lt;&#x2F;span&gt;&lt;span&gt; sstring s {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;123&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;constexpr&lt;&#x2F;span&gt;&lt;span&gt; sstring q {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;456&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;constexpr&lt;&#x2F;span&gt;&lt;span&gt; sstring r {s + q};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;constexpr string&lt;&#x2F;code&gt; 有什么用？这至少在初始化全局静态变量时有用。&lt;code&gt;constexpr&lt;&#x2F;code&gt; 静态变量不会存在烦人的初始化顺序问题。&lt;&#x2F;li&gt;
&lt;li&gt;因为用到了 deducing guide，所以至少需要在 C++ 17 下编译。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;std::string&lt;&#x2F;code&gt; 将在 C++ 20 支持 &lt;code&gt;constexpr&lt;&#x2F;code&gt;，不过编译器全部普及这个特性可能还要等好几年。
&lt;ul&gt;
&lt;li&gt;C++ 现在有一种「&lt;code&gt;constexpr&lt;&#x2F;code&gt; Everything」的倾向。这是为了更好的实现元编程。这是好事。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;constexpr&lt;&#x2F;code&gt; 构造函数要求初始化每个每个子对象和非静态数据成员必须被初始化。奇怪的是，clang 可以通过未初始化的代码。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
      </item>
      <item>
          <title>Rust 的指针别名优化</title>
          <pubDate>Sat, 19 Jan 2019 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://blog.pg999w.top/csarpp-opt/</link>
          <guid>https://blog.pg999w.top/csarpp-opt/</guid>
          <description xml:base="https://blog.pg999w.top/csarpp-opt/">&lt;p&gt;本文研究了基于 Rust 具有的所有权语义的一些优化。&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>为什么编程语言总是应该使用UTF-8而不是UTF-16</title>
          <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://blog.pg999w.top/why-utf16-sacks/</link>
          <guid>https://blog.pg999w.top/why-utf16-sacks/</guid>
          <description xml:base="https://blog.pg999w.top/why-utf16-sacks/">&lt;p&gt;前段时间研究字符编码的时候，看到了一个&lt;a href=&quot;https:&#x2F;&#x2F;www.zhihu.com&#x2F;question&#x2F;35214880&quot;&gt;知乎问题&lt;&#x2F;a&gt;，里面的回答基本上都概念不清，事实上，Unicode “字符”、
“字符串”、“编码”等词语涉及到非常复杂的概念。而目前介绍这个主题的中文文章似乎较为稀少，于是有了这篇文章。&lt;&#x2F;p&gt;
</description>
      </item>
    </channel>
</rss>
